<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hays‘</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-06T15:23:47.667Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hays Ren</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/06/06/2020-06-06/"/>
    <id>http://yoursite.com/2020/06/06/2020-06-06/</id>
    <published>2020-06-06T14:35:02.177Z</published>
    <updated>2020-06-06T15:23:47.667Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: ARTS 第一周<br>date: 2020-06-06</p><hr><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">LeetCode 70: 爬楼梯</a></p><blockquote><pre><code>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？  </code></pre><p><strong>注意：</strong>给定 n 是一个正整数。  </p></blockquote><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入： 3</span><br><span class="line">输出： 3</span><br><span class="line">解释： 有三种方法可以爬到楼顶</span><br><span class="line">1.  1 阶 + 1 阶 + 1 阶</span><br><span class="line">2.  1 阶 + 2 阶</span><br><span class="line">3.  2 阶 + 1 阶</span><br></pre></td></tr></table></figure></p><ul><li><p>思路<br>  本题是一道<strong>动态规划</strong>的题目，<strong>动态规划</strong>的核心思想是利用过去的结果解决未来的问题。即将问题分解为相对简单的<strong>子问题</strong>，顺序求解并保存结果，为下一子问题的求解提供信息。类似数学中的<strong>递推法</strong>。<br>  对于本题，当总台阶数为 1 时，到达楼顶的方法为 1 ，总台阶数为 2 时，到达楼顶的方法为 2 。这便是我们已有解的<strong>子问题</strong>，下一步就是如何通过已知的条件去解决目标问题。对于本题而言，总台阶数为 n 的问题的解等于总台阶数为<code>n - 1</code>与<code>n - 2</code>的解的<strong>和</strong>，因为前两个台阶到达目标台阶的方式唯一且互斥（走 1 步或 2 步）。</p></li><li><p>解答</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line"><span class="keyword">guard</span> n &gt; <span class="number">2</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> n &#125; <span class="comment">// n = 1, n = 2</span></span><br><span class="line"><span class="keyword">var</span> solutions = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">3</span> … n &#123;</span><br><span class="line">solutions.append(solutions[index-<span class="number">1</span>] + solutions[index-<span class="number">2</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> solutions[n]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>时间复杂度：<strong>O(n)</strong>，空间复杂度：<strong>O(n)</strong></p><hr><h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: ARTS 第一周&lt;br&gt;date: 2020-06-06&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Algorithm&quot;&gt;&lt;a href=&quot;#Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Algorithm&quot;&gt;&lt;/a&gt;Algori
      
    
    </summary>
    
    
  </entry>
  
</feed>
